 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/client/src/components/CommunityMap.tsx b/client/src/components/CommunityMap.tsx
index 174d14e7c02442e3492547591a8601abb5fdc2ed..85b28dc601fb6dad3a31d99eddd4a59bf6905ba7 100644
--- a/client/src/components/CommunityMap.tsx
+++ b/client/src/components/CommunityMap.tsx
@@ -1,30 +1,30 @@
 import { useEffect, useRef } from 'react';
 import L from 'leaflet';
 import 'leaflet/dist/leaflet.css';
 import type { Community } from '@shared/schema';
-import { useResolveImageUrl } from '@/hooks/useResolveImageUrl';
+import { resolveImageUrl } from '@/lib/images';
 
 // Create custom marker icon with community color
 const createCustomMarker = (color: string = '#2563eb') => {
   const svgIcon = `
     <svg width="30" height="45" viewBox="0 0 30 45" xmlns="http://www.w3.org/2000/svg">
       <path d="M15 0C6.716 0 0 6.716 0 15c0 8.284 15 30 15 30s15-21.716 15-30C30 6.716 23.284 0 15 0z" fill="${color}"/>
       <circle cx="15" cy="15" r="8" fill="white"/>
     </svg>
   `;
   
   return L.divIcon({
     html: svgIcon,
     iconSize: [30, 45],
     iconAnchor: [15, 45],
     popupAnchor: [0, -45],
     className: 'custom-marker'
   });
 };
 
 interface CommunityMapProps {
   communities: Community[];
   onCommunitySelect?: (community: Community) => void;
   selectedCommunityId?: string;
 }
 
@@ -44,91 +44,114 @@ export default function CommunityMap({
     const map = L.map(mapRef.current, {
       scrollWheelZoom: false,
       doubleClickZoom: false,
       touchZoom: false,
       zoomControl: false,
       dragging: true,
     }).setView([39.6992, -104.9375], 11);
     mapInstanceRef.current = map;
 
     // Add OpenStreetMap tiles
     L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
       attribution: 'Â© OpenStreetMap contributors',
     }).addTo(map);
 
     return () => {
       if (mapInstanceRef.current) {
         mapInstanceRef.current.remove();
         mapInstanceRef.current = null;
       }
     };
   }, []);
 
   useEffect(() => {
     if (!mapInstanceRef.current) return;
 
+    let isCancelled = false;
+
     // Clear existing markers
     markersRef.current.forEach(marker => {
       mapInstanceRef.current?.removeLayer(marker);
     });
     markersRef.current = [];
 
     // Add markers for communities with coordinates
     const validCommunities = communities.filter(
       community => community.latitude && community.longitude
     );
 
     if (validCommunities.length === 0) return;
 
     const markers: L.Marker[] = [];
     validCommunities.forEach(community => {
       const lat = parseFloat(community.latitude!);
       const lng = parseFloat(community.longitude!);
 
       if (isNaN(lat) || isNaN(lng)) return;
 
       // Get community color (use mainColorHex or default to primary blue)
       const markerColor = community.mainColorHex || '#2563eb';
       
       // Create popup content with centered logo, name and city
       const popupDiv = document.createElement('div');
       popupDiv.className = 'text-center p-4 min-w-[200px]';
       
       // Add logo if available
-      if (community.logoImageId) {
+      const logoValue =
+        community.logoImageId ||
+        (community as any)?.logoUrl ||
+        (community as any)?.logoImageUrl;
+
+      if (logoValue) {
         const logoContainer = document.createElement('div');
         logoContainer.className = 'flex justify-center mb-3';
-        
+        logoContainer.style.display = 'none';
+
         const logo = document.createElement('img');
-        logo.src = `/api/images/${community.logoImageId}`;
         logo.alt = `${community.name} logo`;
         logo.className = 'h-12 w-auto object-contain';
-        logo.onerror = () => {
-          // Hide logo if it fails to load
-          logoContainer.style.display = 'none';
+        logo.loading = 'lazy';
+
+        const updateLogoSource = async () => {
+          try {
+            const resolvedUrl = await resolveImageUrl(logoValue);
+            if (!isCancelled && resolvedUrl) {
+              logo.src = resolvedUrl;
+              logoContainer.style.display = 'flex';
+            } else if (!isCancelled) {
+              logoContainer.style.display = 'none';
+            }
+          } catch (error) {
+            if (!isCancelled) {
+              console.error('Failed to resolve community logo image', error);
+              logoContainer.style.display = 'none';
+            }
+          }
         };
-        
+
+        void updateLogoSource();
+
         logoContainer.appendChild(logo);
         popupDiv.appendChild(logoContainer);
       }
 
       // Community name - bold and centered
       const title = document.createElement('h3');
       title.className = 'font-bold text-base mb-1';
       title.style.color = markerColor;
       title.textContent = community.name;
       popupDiv.appendChild(title);
 
       // City name - centered
       const location = document.createElement('p');
       location.className = 'text-sm text-gray-600 mb-3';
       location.textContent = `${community.city}, ${community.state}`;
       popupDiv.appendChild(location);
 
       // View Details button with community color
       const button = document.createElement('button');
       button.className = 'px-4 py-2 text-white text-sm font-semibold rounded-lg hover:opacity-90 transition-opacity w-full';
       button.style.backgroundColor = markerColor;
       button.textContent = 'View Details';
       button.onclick = () => {
         window.location.href = `/communities/${community.slug}`;
       };
@@ -137,35 +160,38 @@ export default function CommunityMap({
       // Create marker with custom color
       const marker = L.marker([lat, lng], {
         icon: createCustomMarker(markerColor)
       })
         .addTo(mapInstanceRef.current!)
         .bindPopup(popupDiv, {
           maxWidth: 250,
           className: 'custom-popup'
         });
 
       // Highlight selected community
       if (selectedCommunityId === community.id) {
         marker.openPopup();
       }
 
       markers.push(marker);
     });
 
     markersRef.current = markers;
 
     // Fit map to show all markers only if no community is selected
     if (markers.length > 0 && !selectedCommunityId) {
       const group = new L.FeatureGroup(markers);
       mapInstanceRef.current.fitBounds(group.getBounds().pad(0.1));
     }
+    return () => {
+      isCancelled = true;
+    };
   }, [communities, selectedCommunityId, onCommunitySelect]);
 
   return (
     <div 
       ref={mapRef} 
       className="w-full h-96 rounded-lg z-0"
       data-testid="community-map"
     />
   );
 }
\ No newline at end of file
diff --git a/client/src/hooks/useResolveImageUrl.ts b/client/src/hooks/useResolveImageUrl.ts
index 6b2ad93632b6f8d824273b68d08cd6ed698fa6d1..55ed1eeb75c5f0c84a7e64d47efd5c2f497a968e 100644
--- a/client/src/hooks/useResolveImageUrl.ts
+++ b/client/src/hooks/useResolveImageUrl.ts
@@ -1,36 +1,39 @@
 import { useQuery } from "@tanstack/react-query";
 import type { Image } from "@shared/schema";
+import { isImageId, fetchImageMetadata } from "@/lib/images";
 
 /**
  * Hook to resolve an image URL from either an image ID or a direct URL
  * @param value - Either a UUID-formatted image ID or a full URL
  * @returns The resolved image URL, undefined if not available, or null if loading
  */
 export function useResolveImageUrl(value: string | undefined | null) {
-  // Check if it's a UUID pattern (image ID)
-  const isImageId = value && /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(value);
-  
-  // Fetch image data if it's an image ID
-  const { data: imageData, isLoading } = useQuery<Image>({
-    queryKey: ['/api/images', value],
-    enabled: !!isImageId,
+  const shouldResolve = isImageId(value);
+
+  const { data: imageData, isLoading } = useQuery<Image | undefined>({
+    queryKey: ["/api/images", value],
+    enabled: shouldResolve,
+    queryFn: async () => {
+      if (!value) return undefined;
+      return fetchImageMetadata(value);
+    },
   });
-  
+
   // Return null if loading (to distinguish from undefined which means no value)
-  if (isImageId && isLoading) {
+  if (shouldResolve && isLoading) {
     return null;
   }
   
   // No value provided
   if (!value) {
     return undefined;
   }
   
   // It's already a URL (starts with http/https or is a relative path)
-  if (!isImageId) {
+  if (!shouldResolve) {
     return value;
   }
-  
+
   // Return the URL from the fetched image data
   return imageData?.url;
-}
\ No newline at end of file
+}
diff --git a/client/src/lib/images.ts b/client/src/lib/images.ts
new file mode 100644
index 0000000000000000000000000000000000000000..71ced2d275a42392073a4100f66bac01f5f72206
--- /dev/null
+++ b/client/src/lib/images.ts
@@ -0,0 +1,37 @@
+import type { Image } from "@shared/schema";
+
+const UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
+
+export function isImageId(value: string | undefined | null): value is string {
+  return typeof value === "string" && UUID_REGEX.test(value);
+}
+
+export async function fetchImageMetadata(imageId: string): Promise<Image | undefined> {
+  try {
+    const response = await fetch(`/api/images/${imageId}`, {
+      credentials: "include",
+    });
+
+    if (!response.ok) {
+      return undefined;
+    }
+
+    return response.json() as Promise<Image>;
+  } catch (error) {
+    console.error("Failed to fetch image metadata", error);
+    return undefined;
+  }
+}
+
+export async function resolveImageUrl(value: string | undefined | null): Promise<string | undefined> {
+  if (!value) {
+    return undefined;
+  }
+
+  if (!isImageId(value)) {
+    return value;
+  }
+
+  const image = await fetchImageMetadata(value);
+  return image?.url;
+}
diff --git a/package-lock.json b/package-lock.json
index e0fde1d2382181c4b0ccdcf8b119e13bd2466cc6..8187d8b20c77d87e99287118e74729b83a3a8553 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -35,50 +35,51 @@
         "@radix-ui/react-slot": "^1.2.0",
         "@radix-ui/react-switch": "^1.1.4",
         "@radix-ui/react-tabs": "^1.1.4",
         "@radix-ui/react-toast": "^1.2.7",
         "@radix-ui/react-toggle": "^1.1.3",
         "@radix-ui/react-toggle-group": "^1.1.3",
         "@radix-ui/react-tooltip": "^1.2.0",
         "@replit/object-storage": "^1.0.0",
         "@tanstack/react-query": "^5.60.5",
         "@tiptap/extension-image": "^3.6.1",
         "@tiptap/extension-link": "^3.6.1",
         "@tiptap/extension-placeholder": "^3.6.1",
         "@tiptap/extension-text-align": "^3.6.1",
         "@tiptap/extension-underline": "^3.6.1",
         "@tiptap/react": "^3.6.1",
         "@tiptap/starter-kit": "^3.6.1",
         "@types/leaflet": "^1.9.20",
         "@types/memoizee": "^0.4.12",
         "@types/multer": "^2.0.0",
         "@types/sharp": "^0.31.1",
         "bcryptjs": "^3.0.2",
         "class-variance-authority": "^0.7.1",
         "clsx": "^2.1.1",
         "cmdk": "^1.1.1",
         "connect-pg-simple": "^10.0.0",
+        "csv-parse": "^5.6.0",
         "date-fns": "^3.6.0",
         "drizzle-orm": "^0.39.1",
         "drizzle-zod": "^0.7.0",
         "embla-carousel-react": "^8.6.0",
         "express": "^4.21.2",
         "express-session": "^1.18.1",
         "framer-motion": "^11.13.1",
         "input-otp": "^1.4.2",
         "leaflet": "^1.9.4",
         "lucide-react": "^0.453.0",
         "memoizee": "^0.4.17",
         "memorystore": "^1.6.7",
         "multer": "^2.0.2",
         "next-themes": "^0.4.6",
         "openid-client": "^6.8.0",
         "passport": "^0.7.0",
         "passport-local": "^1.0.0",
         "react": "^18.3.1",
         "react-day-picker": "^8.10.1",
         "react-dom": "^18.3.1",
         "react-hook-form": "^7.55.0",
         "react-icons": "^5.4.0",
         "react-leaflet": "^4.2.1",
         "react-resizable-panels": "^2.1.7",
         "recharts": "^2.15.2",
@@ -5392,50 +5393,56 @@
         "shebang-command": "^2.0.0",
         "which": "^2.0.1"
       },
       "engines": {
         "node": ">= 8"
       }
     },
     "node_modules/cssesc": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
       "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
       "license": "MIT",
       "bin": {
         "cssesc": "bin/cssesc"
       },
       "engines": {
         "node": ">=4"
       }
     },
     "node_modules/csstype": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
       "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
       "license": "MIT"
     },
+    "node_modules/csv-parse": {
+      "version": "5.6.0",
+      "resolved": "https://registry.npmjs.org/csv-parse/-/csv-parse-5.6.0.tgz",
+      "integrity": "sha512-l3nz3euub2QMg5ouu5U09Ew9Wf6/wQ8I++ch1loQ0ljmzhmfZYrH9fflS22i/PQEvsPvxCwxgz5q7UB8K1JO4Q==",
+      "license": "MIT"
+    },
     "node_modules/d": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/d/-/d-1.0.2.tgz",
       "integrity": "sha512-MOqHvMWF9/9MX6nza0KgvFH4HpMU0EF5uUDXqX/BtxtU8NfB0QzRtJ8Oe/6SuS4kbhyzVJwjd97EA4PKrzJ8bw==",
       "license": "ISC",
       "dependencies": {
         "es5-ext": "^0.10.64",
         "type": "^2.7.2"
       },
       "engines": {
         "node": ">=0.12"
       }
     },
     "node_modules/d3-array": {
       "version": "3.2.4",
       "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
       "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
       "license": "ISC",
       "dependencies": {
         "internmap": "1 - 2"
       },
       "engines": {
         "node": ">=12"
       }
     },
 
EOF
)